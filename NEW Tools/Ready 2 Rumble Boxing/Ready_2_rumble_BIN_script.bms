# Script by Bartlomiej Duda (Ikskoks)
# Ready 2 Rumble Boxing (PS1) *.BIN script


# Ver    Date        Author               Comment
# v0.1   15.11.2022  Bartlomiej Duda      -
# v0.2   16.11.2022  Bartlomiej Duda      -
# v0.3   17.11.2022  Bartlomiej Duda      -
# v0.4   19.11.2022  Bartlomiej Duda      -
# v0.5   19.11.2022  Bartlomiej Duda      -



idstring "DSET"
get INDEX_BLOCK_SIZE long
get VERSION short  # 1
get NUMBER_OF_DIRECTORIES long
get NULLS short
get INDEX_BLOCK_SIZE long
GetDString DATASETS_NAME 12
get ARCHIVE_NAME basename
get ARCHIVE_SIZE asize
set ENTRY_HEADER_SIZE long 32


for i = 0 < NUMBER_OF_DIRECTORIES
 	get ENTRY_ID long
 	GetDString DIR_NAME 12
next i


for j = 0
 	SavePos ENTRY_START_OFFSET
 	GetDString ENTRY_TYPE 4
	get ENTRY_SIZE long
	get UNK0 short
	get UNK1 short
	get UNK2 long
	get ENTRY_SIZE long
	GetDString FILE_NAME 12
	
	get NUMBER_OF_FILES long
	get FILE_INDEX_SIZE long
	
	
	set FILE_EXTENSION string ".bin"  # default
	if ENTRY_TYPE == "TIM "
		set FILE_EXTENSION string ".tim"
	endif
	if ENTRY_TYPE == "SFX "
		set FILE_EXTENSION string ".vag"
	endif
	if ENTRY_TYPE == "PHM "
		set FILE_EXTENSION string ".phm"
	endif
	if ENTRY_TYPE == "MODL"
		set FILE_EXTENSION string ".modl"
	endif
	if ENTRY_TYPE == "MLST"
		set FILE_EXTENSION string ".mlst"
	endif
	
	
	# if for dumping whole entries (workaround!)
	if ENTRY_TYPE != "TIM " && ENTRY_TYPE != "SFX "
		print "Unsupported entry type %ENTRY_TYPE%. Dumping only!"
		
		XMATH NEXT_ENTRY_OFFSET "ENTRY_START_OFFSET + ENTRY_HEADER_SIZE + ENTRY_SIZE"
		XMATH DUMP_SIZE "NEXT_ENTRY_OFFSET - ENTRY_START_OFFSET"
		string OUTPUT_FILE_PATH p "%s/%s%s%s%s" ARCHIVE_NAME FILE_NAME "_" j FILE_EXTENSION
		log OUTPUT_FILE_PATH ENTRY_START_OFFSET DUMP_SIZE
		goto NEXT_ENTRY_OFFSET
		
		#print "f_name: %OUTPUT_FILE_PATH%, st_off: %ENTRY_START_OFFSET%, f_size: %DUMP_SIZE%, next_en_off: %NEXT_ENTRY_OFFSET%" 
	
	else
		
		XMATH BASE_DATA_OFFSET "ENTRY_START_OFFSET + ENTRY_HEADER_SIZE + FILE_INDEX_SIZE"
		set CURRENT_DATA_OFFSET long 0
		
		XMATH LAST_FILE_INDEX "NUMBER_OF_FILES - 1"
		for k = 0 < NUMBER_OF_FILES
		
			if k == LAST_FILE_INDEX
				set END_OFFSET long ENTRY_SIZE
			else
				get END_OFFSET long
			endif
			
			XMATH DATA_REAL_START_OFFSET "BASE_DATA_OFFSET + CURRENT_DATA_OFFSET"
			XMATH DATA_REAL_END_OFFSET "BASE_DATA_OFFSET + END_OFFSET - FILE_INDEX_SIZE"
			XMATH DATA_SIZE "DATA_REAL_END_OFFSET - DATA_REAL_START_OFFSET"
			string OUTPUT_FILE_PATH p "%s/%s%s%s%s" ARCHIVE_NAME FILE_NAME "_" k FILE_EXTENSION
			
			#print "AAA f_name: %OUTPUT_FILE_PATH%, r_st_offset: %DATA_REAL_START_OFFSET%, r_end_off: %DATA_REAL_END_OFFSET%, f_size: %DATA_SIZE%, e_off: %END_OFFSET%"
			log OUTPUT_FILE_PATH DATA_REAL_START_OFFSET DATA_SIZE
			XMATH CURRENT_DATA_OFFSET "CURRENT_DATA_OFFSET + DATA_SIZE"

			
		next k
		
		
		XMATH NEXT_ENTRY_OFFSET "ENTRY_START_OFFSET + ENTRY_HEADER_SIZE + ENTRY_SIZE"
		goto NEXT_ENTRY_OFFSET
		
		
	endif
	
	if NEXT_ENTRY_OFFSET >= ARCHIVE_SIZE
		print "end of archive..."
		break
	endif
	
next j
