//------------------------------------------------
//--- 010 Editor v15.0.1 Binary Template
//
//      File: EA Font File
//   Authors: BartÅ‚omiej Duda (Ikskoks)
//   Version: 1.0
//   Purpose: File Formats Reverse Engineering
//  Category: Font
// File Mask: *.sfn / *.ffn / *.xfn / *mfn
//  ID Bytes:  FNTS / FntS / FntX / FNTF / FntF / FNTI / FNTP / FntM 
//   History: v1.0  01.06.2025  Initial version
//            v1.1  05.08.2025  Format Update
//------------------------------------------------

LittleEndian();

struct FILE {
    
    struct HEADER {
        char signature[4];  //  FNTS / FntS etc.
        uint32 total_file_size;
        uint16 version;  // e.g. 304 = 3.04
        uint16 number_of_characters;
        uint32 font_flags;
        local uint8 format_flag = (font_flags >> 18) & 0x1;
        
        uint8 center_x;  // x offset delta 
        uint8 center_y; // y offset delta 
        uint8 ascent;  // distance from baseline to top of font 
        uint8 descent;  // distance from baseline to bottom of font
        uint32 char_info_table_offset;
        uint32 kerning_table_offset;
        uint32 shape_header_offset;
        
        if (header.version >=100)  // TODO - check newer versions
        {
            uint8 font_states[96];
        }
        

    } header <bgcolor=cLtGreen>;
    
    
    FSeek(header.char_info_table_offset);
    
    struct CHARACTER_INFO_TABLE {
        char char_index[2];  // 16-bit unicode
        uint8 char_width;
        uint8 char_height;
        uint16 u;
        uint16 v;
        uint8 advance_y;
        uint8 x_offset;
        uint8 y_offset;
        
        if (header.version >=200)
        {
            uint8 numkern;
        }
        
        if (header.format_flag == 1)
        {
            uint16 kernindex;
            uint16 advance_x;
        }
    } char_info_table[header.number_of_characters] <optimize=false, bgcolor=cLtBlue>;
    
    
    if (header.kerning_table_offset != 0)
    {
        FSeek(header.kerning_table_offset);
        uint32 number_of_kerning_entries;
    
        struct KERNING_TABLE {
            if (header.version >=310)
            {
                uint16 previous_code;
                char kerning_value;
                uchar next_code;
            }
            else
            {
                uchar previous_code[2];
                uchar next_code[2];
                char kerning_value;
                char padding[3];
            }
        } kerning_table[number_of_kerning_entries] <optimize=false, bgcolor=cLtRed>;
    }
    

    FSeek(header.shape_header_offset);
    
    struct SHAPE_HEADER {
        uint8 record_id;
        local uint8 record_id_masked = record_id & 0x7F;
        local uint8 compression_flag = record_id & 0x80;  // 0 - not compressed / 128 - compressed
        uint8 next_binary_attachment_offset[3];
        uint16 image_width;
        uint16 image_height;
        int16 center_x;
        int16 center_y;
        uint16 shape_x;
        uint16 shape_y;
    } shape_header <bgcolor=cLtYellow>;
    
} file;
